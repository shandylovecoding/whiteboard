{"version":3,"sources":["components/board/Board.jsx","components/container/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["Board","props","socket","io","connect","isDrawing","on","data","root","this","interval","setInterval","clearInterval","image","Image","ctx","document","querySelector","getContext","onload","drawImage","src","drawOnCanvas","newProps","strokeStyle","color","lineWidth","size","canvas","sketch","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","drawing","current","onMouseDown","e","x","clientX","touches","y","clientY","onMouseUp","drawLine","onMouseMove","throttle","callback","delay","previousCall","Date","getTime","time","apply","arguments","addEventListener","x0","y0","x1","y1","beginPath","moveTo","lineTo","stroke","closePath","base64ImageData","toDataURL","emit","class","id","className","onClick","React","Component","Container","state","params","setState","target","value","type","onChange","changeColor","bind","changeSize","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f7e2cc1.chunk.js","sourcesContent":["import React from 'react';\nimport io from 'socket.io-client';\n\nimport './style.css';\n\nclass Board extends React.Component {\n\n    timeout;\n    socket = io.connect(\"http://192.168.128.143:5000\");\n\n    ctx;\n    isDrawing = false;\n\n    constructor(props) {\n        super(props);\n\n        this.socket.on(\"canvas-data\", function (data) {\n\n            var root = this;\n            var interval = setInterval(function () {\n                if (root.isDrawing) return;\n                root.isDrawing = true;\n                clearInterval(interval);\n                var image = new Image();\n                var canvas = document.querySelector('#board');\n                var ctx = canvas.getContext('2d');\n                image.onload = function () {\n                    ctx.drawImage(image, 0, 0);\n\n                    root.isDrawing = false;\n                };\n                image.src = data;\n            }, 200)\n        })\n    }\n\n    componentDidMount() {\n        this.drawOnCanvas();\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.ctx.strokeStyle = newProps.color;\n        this.ctx.lineWidth = newProps.size;\n    }\n    \n    drawOnCanvas() {\n        var canvas = document.querySelector('#board');\n        this.ctx = canvas.getContext('2d');\n        var ctx = this.ctx;\n\n        var sketch = document.querySelector('#sketch');\n        var sketch_style = getComputedStyle(sketch);\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\n        var drawing = false;\n        var current = {}\n\n        canvas.addEventListener('mousedown', onMouseDown, false);\n        canvas.addEventListener('mouseup', onMouseUp, false);\n        canvas.addEventListener('mouseout', onMouseUp, false);\n        canvas.addEventListener('mousemove', throttle(onMouseMove, 10), false);\n\n        //Touch support for mobile devices\n        canvas.addEventListener('touchstart', onMouseDown, false);\n        canvas.addEventListener('touchend', onMouseUp, false);\n        canvas.addEventListener('touchcancel', onMouseUp, false);\n        canvas.addEventListener('touchmove', throttle(onMouseMove, 10), false);\n\n        function onMouseDown(e) {\n            drawing = true;\n            current.x = e.clientX || e.touches[0].clientX;\n            current.y = e.clientY || e.touches[0].clientY;\n        }\n\n        function onMouseUp(e) {\n            if (!drawing) { return; }\n            drawing = false;\n            drawLine(current.x, current.y, e.clientX || e.touches.clientX, e.clientY || e.touches.clientY, current.color, true);\n        }\n\n        function onMouseMove(e) {\n            if (!drawing) { return; }\n            drawLine(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, true);\n            current.x = e.clientX || e.touches[0].clientX;\n            current.y = e.clientY || e.touches[0].clientY;\n        }\n        function throttle(callback, delay) {\n            var previousCall = new Date().getTime();\n            return function () {\n                var time = new Date().getTime();\n\n                if ((time - previousCall) >= delay) {\n                    previousCall = time;\n                    callback.apply(null, arguments);\n                }\n            };\n        }\n\n        var root = this;\n        //onPaint\n        var drawLine = function (x0, y0, x1, y1) {\n            ctx.beginPath();\n            ctx.moveTo(x0, y0);\n            ctx.lineTo(x1, y1);\n            ctx.stroke();\n            ctx.closePath();\n\n            var base64ImageData = canvas.toDataURL(\"image/png\");\n            root.socket.emit(\"canvas-data\", base64ImageData);\n\n        };\n        \n        \n    }\n    \n\n    render() {\n        return (\n            <div class=\"sketch\" id=\"sketch\">\n                <canvas className=\"board\" id=\"board\"></canvas>\n                <button onClick={this.drawOnCanvas} >Clear</button>\n            </div>\n        )\n    }\n}\n\nexport default Board","import React from 'react';\nimport Board from '../board/Board';\n\nimport './style.css';\n\nclass Container extends React.Component\n{\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            color: \"#000000\",\n            size: \"5\"\n        }\n    }\n\n    changeColor(params) {\n        this.setState({\n            color: params.target.value\n        })\n    }\n\n    changeSize(params) {\n        this.setState({\n            size: params.target.value\n        })\n    }\n\n    render() {\n\n        return (\n            <div className=\"container\">\n                <div class=\"tools-section\">\n                    <div className=\"color-picker-container\">\n                        Select Brush Color : &nbsp; \n                        <input type=\"color\" value={this.state.color} onChange={this.changeColor.bind(this)}/>\n                    </div>\n\n                    <div className=\"brushsize-container\">\n                        Select Brush Size : &nbsp; \n                        <select value={this.state.size} onChange={this.changeSize.bind(this)}>\n                            <option> 5 </option>\n                            <option> 10 </option>\n                            <option> 15 </option>\n                            <option> 20 </option>\n                            <option> 25 </option>\n                            <option> 30 </option>\n                        </select>\n                    </div>\n\n                </div>\n\n                <div class=\"board-container\">\n                    <Board color={this.state.color} size={this.state.size}></Board>\n                </div>\n\n                <div>\n                   \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Container","import React from 'react';\nimport './App.css';\nimport Container from './components/container/Container';\n\n\nfunction App() {\n  return (\n    <Container/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}